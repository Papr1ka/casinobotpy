from asyncio.tasks import sleep
from collections import namedtuple
from time import time
from discord.ext.commands import Cog, command, guild_only
from discord import Embed, Colour
from asyncio import TimeoutError
from random import randint, choices, random, shuffle
from cogs.leveling import LevelTable

from database import db
from math import sqrt
from discord_components.component import Select, SelectOption, Button, ButtonStyle

from main import on_command
from models.fishing import *
from models.fishing import components as fish_components

fish = namedtuple('fish', ['url', 'cost', 'chance', 'name'])
fishes = [
    fish("https://key0.cc/images/preview/111781_c674df9fa58a5ad9cc1c1d9394a5d6bc.png", 10, 0.5, '–ö–∏—Å–ª–æ—Ç–Ω–∞—è —Ä—ã–±–∞'),
    fish("https://key0.cc/images/preview/97955_e25d2bd07b16fc7e870e6d3421901d02.png", 0, 0.5, '–ö–æ—Å—Ç–∏')
]

class Jobs(Cog):

    __waitingFish = lambda self: randint(1, 30)
    modifier = lambda self, level: sqrt(level)

    def __init__(self, Bot):
        self.Bot = Bot
        self.games = {}
        temperature = randint(0, 30), randint(0, 30)
        self.max_temp = max(temperature)
        self.min_temp = min(temperature)
        self.temperature = self.gen_temp()
        self.fortune_number = randint(2, 12)
        self.weather = self.gen_weather()
        

    def gen_temp(self):
        temperature = {}
        for t in range(0, 24):
            if t in range(3, 15 + 1):
                temperature[t] = round(self.min_temp + (self.max_temp - self.min_temp) / 12 * (t - 3))
            else:
                if t in range(0, 3):
                    t += 24
                temperature[t] = round(self.max_temp - (self.max_temp - self.min_temp) / 12 * abs(t - 15))

        return temperature

    def gen_weather(self):
        weather = {}
        for t in range(0, 24):
            mod = t % self.fortune_number
            if mod == 0:
                weather[t] = "üåßÔ∏è –î–æ–∂–¥—å"
            elif mod == 1:
                weather[t] = "üå´Ô∏è –¢—É–º–∞–Ω"
            else:
                weather[t] = "üåû –Ø—Å–Ω–æ"
        return weather
            

    @command(
        usage="`=fish`",
        help="–†—ã–±–∞–ª–∫–∞. –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ - `=guide`"
    )
    @guild_only()
    async def fish(self, ctx):
        await on_command(self.Bot.get_command('fish'))
        embed = Embed(
            title="–†—ã–±–∞–ª–∫–∞",
            color=Colour.dark_theme()
        )
        
        finventory = await db.fetch_user(ctx.guild.id, ctx.author.id, finventory=1)
        finventory = finventory['finventory']
        p = [ponds[i] for i in finventory['ponds']]
        r = [all_rods[i] for i in set(finventory['rods'])]
        
        t = time() // 3600 % 24
        temp = self.temperature[t]
        weather = self.weather[t]
        footer = f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ‚ÑÉ | –ü–æ–≥–æ–¥–∞: {weather}"
        embed.set_footer(text=footer, icon_url=self.Bot.user.avatar_url)
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar_url)
        c_id = str(ctx.message.id)
        components = [Select(
            placeholder="–£–¥–∏–ª–∏—â–µ",
            options=[SelectOption(label=item.name, value=item.id) for item in r],
            custom_id=c_id + "rod"
        ),
                      Select(
            placeholder="–í–æ–¥–æ—ë–º",
            options=[SelectOption(label=item.name, value=item.id) for item in p],
            custom_id=c_id + "pon"
        )]
        main = await ctx.send(embed=embed, components=components)
        o = 0
        while o < 2:
            interaction = await self.Bot.wait_for('select_option')
            if (interaction.custom_id == c_id + "rod" or interaction.custom_id == c_id + "pon") and interaction.user == ctx.author:
                o += 1
                response = int(interaction.values[0])
                if interaction.custom_id[-1:-4:-1][::-1] == 'rod':
                    item = all_rods[response]
                    embed.set_thumbnail(url=item.url)
                    embed.add_field(name="–£–¥–∏–ª–∏—â–µ", value=item.name)
                    main_rod = item
                else:
                    item = ponds[response]
                    embed.set_image(url=item.url)
                    embed.add_field(name="–í–æ–¥–æ—ë–º", value=item.name)
                    main_pond = item
                if len(components) == 2:
                    components.pop(0 if interaction.custom_id[-1:-4:-1][::-1] == 'rod' else 1)
                else:
                    components = [Button(label="–†—ã–±–∞—á–∏—Ç—å", style=ButtonStyle.green, custom_id=c_id + "fish")]
                await interaction.edit_origin(embed=embed, components=components)
        user_data = await db.fetch_user(ctx.guild.id, ctx.author.id, money=1, finventory=1)
        user_money = user_data['money']
        user_components = {str(i): 0 for i in range(1, 9)}
        user_components.update(user_data['finventory']['components'])
        
        start = time()
        while time() - start < 300:
            try:
                interaction = await self.Bot.wait_for("button_click", check = lambda i: i.custom_id == c_id + "fish" and i.user == ctx.author, timeout=60)
            except TimeoutError:
                start = time()
            else:
                e = Embed(title=f"–ü–æ–≥–æ–¥–∞: {footer}", color=Colour.dark_theme())
                e.description = f"–î–µ–Ω–µ–≥: `{user_money}`$ | –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
                pl = ', '.join([f'{fish_components[i].re} - `{user_components[i]}`' for i in user_components if user_components[i] != 0])
                e.description += pl if pl != "" else "–ü—É—Å—Ç–æ"
                await interaction.respond(embed=e)
                screen = (44, 12)
                aspect = screen[0] / screen[1]
                x_y = 11 / 24
                embed = Embed(title="–†—ã–±–∞—á–∏–º | –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏, –∫–æ–≥–¥–∞ –∫—Ä—É–≥–∏ —Å–æ–≤–ø–∞–¥—É—Ç", color=Colour.dark_theme())
                description = ("`" + "." * 44 + "`\n") * 12
                embed.description = description
                r = await ctx.send(embed=embed)
                await r.add_reaction("üé£")
                self.games[r.id] = False
                co = 0.5
                st = time()
                circle = round(random(), 1)
                if circle > 0.9: circle = 0.9
                timeout = 13
                
                coc = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
                shuffle(coc)
                
                while not self.games[r.id]:
                    await sleep(1)
                    if time() - st > timeout or self.games[r.id]:
                        #self.games[r.id] = True
                        break
                    description = ""
                    co = coc[0]
                    coc.pop(0)
                    for y in range(screen[1]):
                        y_cord = y / screen[1] * 2 - 1
                        for x in range(screen[0]):
                            x_cord = x / screen[0] * 2 - 1
                            x_cord *= aspect * x_y
                            if round(x_cord ** 2 + y_cord ** 2, 1) == co:
                                description += "*"
                            elif round(x_cord ** 2 + y_cord ** 2, 1) == circle:
                                description += "@"
                            else:
                                description += "."
                        description += "\n"
                    embed.description = "```"+description+"```"
                    await r.edit(embed=embed)
                
                catch = abs(co - circle) <= main_rod.modifiers['aim'] * 0.1
                if catch:
                    f = main_pond.modifiers['chances']
                    fish = choices([i.id for i in f], [i.chance for i in f])
                    fish_index = fish[0]
                    fish = await get_fish(fish_index, main_rod.modifiers['x'], temp, weather, time=t, t=main_rod.modifiers.get("time", None), w=main_rod.modifiers.get("weather", None))
                    embed = Embed(title=f"–ü–æ–π–º–∞–Ω–∞ —Ä—ã–±–∞: {fish.name}", color=Colour.dark_theme())
                    embed.set_image(url=fish.url)
                    embed.add_field(name="–°—Ç–æ–∏–º–æ—Å—Ç—å", value=fish.cost)
                    embed.description = fish.description
                    embed.description += f"\n–í–µ—Å: {fish.weight} –∫–≥\n"
                    embed.description += f"\–ú–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å: {', '.join([f'{fish_components[i].name} - {fish.components[i]}' for i in fish.components])}\n"
                    components = [
                        [Button(label="–ü—Ä–æ–¥–∞—Ç—å", style=ButtonStyle.green, custom_id=c_id + "sell"),
                         Button(label="–í —Å–∞–¥–æ–∫", style=ButtonStyle.green, custom_id=c_id + "cage"),
                         Button(label="–†–∞–∑–æ–±—Ä–∞—Ç—å", style=ButtonStyle.green, custom_id=c_id + "disa")]
                        ]
                    r = await ctx.send(embed=embed, components=components)
                    try:
                        interaction = await self.Bot.wait_for("button_click", check = lambda i: (i.custom_id == c_id + "sell" or i.custom_id == c_id + "cage" or i.custom_id == c_id + "disa") and i.user == ctx.author, timeout=60)
                    except TimeoutError:
                        await db.update_user(ctx.guild.id, ctx.author.id, {'$push': {f'finventory.cage': await json_fish(fish)}})
                        await interaction.edit_origin(embed=Embed(title="–£–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–∞–¥–æ–∫", color=Colour.dark_theme()), components=[])
                    else:
                        if interaction.custom_id == c_id + "sell":
                            await db.update_user(ctx.guild.id, ctx.author.id, {'$inc': {'money': fish.cost, 'exp': LevelTable['fishing']}})
                            user_money += fish.cost
                            await interaction.edit_origin(embed=Embed(title=f"–£–ª–æ–≤ –ø—Ä–æ–¥–∞–Ω, –ø–æ–ª—É—á–µ–Ω–æ: `{fish.cost}$`", color=Colour.dark_theme()), components=[Button(label="–†—ã–±–∞—á–∏—Ç—å", style=ButtonStyle.blue, custom_id=c_id + "fish")])
                        elif interaction.custom_id == c_id + "disa":
                            await db.update_user(ctx.guild.id, ctx.author.id, {'$inc': {f'finventory.components.{i}': fish.components[i] for i in fish.components}, '$inc': {'exp': LevelTable['fishing']}})
                            for i in fish.components:
                                user_components[i] += fish.components[i]
                            await interaction.edit_origin(embed=Embed(title=f"–†—ã–±–∞ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞, –ø–æ–ª—É—á–µ–Ω–æ: {', '.join([f'{fish_components[i].name} - {fish.components[i]}' for i in fish.components])}", color=Colour.dark_theme()), components=[Button(label="–†—ã–±–∞—á–∏—Ç—å", style=ButtonStyle.blue, custom_id=c_id + "fish")])
                        else:
                            await db.update_user(ctx.guild.id, ctx.author.id, {'$push': {'finventory.cage': await json_fish(fish)}, '$inc': {'exp': LevelTable['fishing']}})
                            await interaction.edit_origin(embed=Embed(title="–£–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–∞–¥–æ–∫", color=Colour.dark_theme()), components=[Button(label="–†—ã–±–∞—á–∏—Ç—å", style=ButtonStyle.blue, custom_id=c_id + "fish")])
                else:
                    embed = Embed(title="–†—ã–±–∞ —É—Å–∫–æ–ª—å–∑–Ω—É–ª–∞", color=Colour.dark_theme())
                    components = [Button(label="–†—ã–±–∞—á–∏—Ç—å", style=ButtonStyle.blue, custom_id=c_id + "fish")]
                    await ctx.send(embed=embed, components=components)
                start = time()

        print("finished")
    
    
    @command(
        usage="`=guide`",
        help='–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä—ã–±–æ–ª–æ–≤—Å—Ç–≤–æ'
    )
    async def guide(self, ctx):
        await on_command(self.Bot.get_command('guide'))
        embed = Embed(title="–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä—ã–±–∞–ª–∫—É", color=Colour.dark_theme())
        embed.add_field(name="**–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è**", value="–î–ª—è —Ä—ã–±–∞–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `=fish`, –≤—ã–±–µ—Ä–µ—Ç–µ —É–¥–æ—á–∫—É | —Å–ø–∏–Ω–∏–Ω–≥ , –≤–æ–¥–æ—ë–º –∏ –Ω–∞–∂–º–∏—Ç–µ '—Ä—ã–±–∞—á–∏—Ç—å'", inline=False)
        embed.add_field(name="**–ú–µ—Ö–∞–Ω–∏–∫–∞ –ª–æ–≤–ª–∏**", value="–î–ª—è –ø–æ–∏–º–∫–∏ —Ä—ã–±—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç–º–æ–¥–∑–∏: üé£ –≤ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ 2 –∫—Ä—É–≥–∞ —Å—Ö–æ–¥—è—Ç—Å—è –≤ 1.\n–û—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —É–¥–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏—Ç —Ä–∞–∑–±—Ä–æ—Å –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Ä—ã–±–∞ –Ω–µ —É—Å–∫–æ–ª—å–∑–Ω—ë—Ç. –ü—Ä–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ 1: –ö—Ä—É–≥(*) –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–∞–ª—å—à–µ –ö—Ä—É–≥–∞ (@) –Ω–∞ 1 –∏—Ç–µ—Ä–∞—Ü–∏—é", inline=False)
        embed.add_field(name="**–ì–¥–µ —É–∑–Ω–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å?**", value="–¢–æ—á–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —É–¥–æ—á–∫–æ–π –≤ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ `=fshop` => —É–¥–∏–ª–∏—â–∞. –î–ª—è –ë–∞–º–±—É–∫: 1", inline=False)
        embed.add_field(name="**–ù–∞–∂–∞–ª–∏ —Ä–æ–≤–Ω–æ –≤ —Ç–∞–π–º–∏–Ω–≥, –Ω–æ —Ä—ã–±–∞ —É—Å–∫–æ–ª—å–∑–Ω—É–ª–∞?**", value="–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±—Ä–∞—Ç—å –Ω–∞ —É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —É –≤–∞—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è.", inline=False)
        embed.add_field(name="**–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã | –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è | –ú–∞–≥–∞–∑–∏–Ω**", value="–ü–æ–π–º–∞–Ω—ã–µ —Ä—ã–±—ã –º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n–ë–∞–º–±—É–∫ | BA , –ö–∞—Ä–±–æ–Ω | CA , –ö–æ–º–ø–æ–∑–∏—Ç | CO , –ö–µ—Ä–∞–º–∏–∫–∞ | CE , –ê–ª—é–º–∏–Ω–∏–π | AL , –ì—Ä–∞—Ñ–∏—Ç | GR , –ù–µ–π–ª–æ–Ω | NY , –ö–∞–ø—Ä–æ–Ω | KA\n–û–Ω–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –∞ —Ç–∞–∫–∂–µ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π `=workshop`\n–í –ú–∞—Å—Ç–µ—Ä—Å–∫–æ–π –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —É–¥–æ—á–∫—É –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å —É–¥–æ—á–∫–∏ –∏ –≤–æ–¥–æ—ë–º—ã –∑–∞ –¥–µ–Ω—å–≥–∏ –≤ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ `=fshop`", inline=False)
        embed.add_field(name="**–ö–∞–∫ —É–∑–Ω–∞—Ç—å, –∏–∑ –∫–∞–∫–æ–π —Ä—ã–±—ã –≤—ã–ø–∞–¥–∞–µ—Ç –Ω—É–∂–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?**", value="–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –ø–∞–º—è—Ç—å, –Ω–æ –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç–µ –≤—Å—ë, —á—Ç–æ –ø–æ–∑–Ω–∞—ë—Ç–µ", inline=False)
        embed.add_field(name="**–°–∞–¥–æ–∫**", value="–ü–æ–π–º–∞–ª–∏ —Ä–µ–∫–æ—Ä–¥–Ω–æ–≥–æ —Å–æ–º–∞, –Ω–æ –¥—Ä—É–∑—å—è –¥–∞–ª–µ–∫–æ? –ù–µ –±–µ–¥–∞! –û—Ç–ª–æ–∂–∏—Ç–µ –µ–≥–æ –≤ —Å–∞–¥–æ–∫!\n–í–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ —Å–æ–º–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞—Ç—å, –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å", inline=False)
        embed.add_field(name="**–ö–∞—á–µ—Å—Ç–≤–æ —Ä—ã–±—ã**", value="–£ —É–¥–æ—á–µ–∫ –µ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å 'x' –∫ –∫–∞—á–µ—Å—Ç–≤—É —Ä—ã–±—ã. –û—Ç –Ω–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —Ü–µ–Ω–∞ —Ä—ã–±—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–∫–µ\n–ù–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–∞–∫–∂–µ –≤–ª–∏—è–µ—Ç –ø–æ–≥–æ–¥–∞. –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ - 15 ‚ÑÉ - 20 ‚ÑÉ –∏ –¥–æ–∂–¥—å. –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –∫–∞—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö—É–∂–µ.", inline=False)
        embed.add_field(name="**–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ**", value="–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ—á–∫–∏ –∏–º–µ—é—Ç —Å–∫—Ä—ã—Ç—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ –∫–∞—á–µ—Å—Ç–≤—É —Ä—ã–±—ã, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –û–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–∞–∫–∏–µ —É–¥–æ—á–∫–∏ –º–æ–∂–Ω–æ –ø–æ –µ—ë –æ–ø–∏—Å–∞–Ω–∏—é", inline=False)
        embed.add_field(name="**–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã | –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ?**", value="`=offer`", inline=False)
        embed.set_author(name="Papr1ka#8145", icon_url="https://cdn.discordapp.com/avatars/397352286487052288/503e1f8c57ea6cdb3fefb8ed6d695059.webp?size=80")
        await ctx.send(embed=embed)
        
    @Cog.listener()
    async def on_raw_reaction_add(self, payload):
        if payload.emoji.__str__() == "üé£" and not payload.member.bot:
            self.games[payload.message_id] = True

def setup(Bot):
    Bot.add_cog(Jobs(Bot))