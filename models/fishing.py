from collections import namedtuple
from random import uniform
from typing import Dict, List

fish_rod = namedtuple('Fish_rod', ['name', 'cost', 'description', 'modifiers', 'url', 'id'])
pond = namedtuple('Pond', ['name', 'cost', 'description', 'modifiers', 'url', 'id'])
fish = namedtuple('Fish', ['name', 'cost', 'description', 'url', 'weight', 'components'])
fish_chance = namedtuple('FishChance', ['id', 'chance'])

component = namedtuple('Component', ['name', 'id', 're'])

components: Dict[int, component] = {
    "1": component('–ë–∞–º–±—É–∫', "1", 'BA'),
    "2": component('–ö–∞—Ä–±–æ–Ω', "2", 'CA'),
    "3": component('–ö–æ–º–ø–æ–∑–∏—Ç', "3", 'CO'),
    "4": component('–ö–µ—Ä–∞–º–∏–∫–∞', "4", 'CE'),
    "5": component('–ê–ª—é–º–∏–Ω–∏–π', "5", "AL"),
    "6": component('–ì—Ä–∞—Ñ–∏—Ç', "6", "GR"),
    "7": component('–ù–µ–π–ª–æ–Ω', "7", "NY"),
    "8": component('–ö–∞–ø—Ä–æ–Ω', "8", "KA"),
}

rods: Dict[int, fish_rod] = {
    1: fish_rod('–ë–∞–º–±—É–∫', 1000, "–°–¥–µ–ª–∞–Ω–∞ –∏–∑ –ø–æ–¥—Ä—É—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", {'x': 1, 'aim': 1}, "https://i.ibb.co/dDXVT8j/image.png", 1),
    2: fish_rod('–†—É—á–µ–π–Ω–∏–∫', 5000, "–£–¥–∏–ª–∏—â–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ø–æ–∫—Ä–∞—à–µ–Ω–æ–≥–æ –±–∞–º–±—É–∫–∞, –Ω–µ–π–ª–æ–Ω–æ–≤–∞—è –ª–µ—Å–∫–∞ –º–∞–ª–æ–∑–∞–º–µ—Ç–Ω–∞ –≤ –≤–æ–¥–µ", {'x': 1.2, 'aim': 1}, "https://i.ibb.co/Hq7TnrS/image.png", 2),
    3: fish_rod('–ë–µ–ª–∏–º–µ—Ä', 15000, "–û—Ç–±–æ—Ä–Ω—ã–π –±–∞–º–±—É–∫, –∫–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è —Ä—É—á–∫–∞, –≥—Ä–∞—Ñ–∏—Ç–æ–≤–∞—è –∫–∞—Ç—É—à–∫–∞", {'x': 1.5, 'aim': 1}, "https://i.ibb.co/p0nnkZL/image.png", 3),
    4: fish_rod('–§–ª–µ–∏—Ä', 30000, "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑ –∫–∞—Ä–±–æ–Ω–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª—ë–≥–∫–æ—Å—Ç—å", {'x': 1.5, 'aim': 2}, "https://i.ibb.co/6r6kcdr/image.png", 4),
    5: fish_rod('–°–æ–≤–∞', 50000, "–ù–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ —Å–∏–ª–∞ –Ω–æ—á–Ω–æ–≥–æ —Ö–∏—â–Ω–∏–∫–∞, –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ—á–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏", {'x': 2, 'aim': 2, 'time': (0.8, 1.2)}, "https://i.ibb.co/ZX5xqj5/image.png", 5),
    6: fish_rod('–£–¥–æ—á–∫–∞ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä–∞', 1000000, "–ò–∑—É–º—Ä—É–¥–Ω–∞—è —É–¥–æ—á–∫–∞ –Ω–µ–ø—Ä–∞–∫—Ç–∏—á–Ω–∞? –î–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –∞–ª–º–∞–∑—ã!", {'x': 4, 'aim': 3}, "https://i.ibb.co/92PNTng/image.png", 6)
}


#id must be unicle with rods
custom_rods: Dict[int, fish_rod] = {
    1000: fish_rod("–ü–µ–Ω–∞–∫", [(components['1'], 50), (components['7'], 30)], "–∏–º–µ–Ω–Ω–æ —Å –Ω–µ–≥–æ –Ω–∞—á–∏–Ω–∞–ª —Å–≤–æ–π –ø—É—Ç—å —Ä—ã–±–∞–∫–∞ –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü –Ω–∞ –æ–±–ª–æ–∂–∫–µ –ü—Ä–µ—Å—Ç–Ω–æ–≥–æ –≤–æ–¥–æ—ë–º–∞", {'x': 1.5, 'aim': 2}, "https://i.ibb.co/JxmZLxz/image.png", 1000),
    1001: fish_rod("–¢–∞–Ω–∑–∞–≤—Ä–∏–¥–∞", [(components['6'], 80), (components['2'], 100), (components['7'], 300)], "–õ—é–±–∏—Ç —Ç—É–º–∞–Ω", {'x': 2, 'aim': 2, 'weather': {"üå´Ô∏è –¢—É–º–∞–Ω": 1.25, "üåû –Ø—Å–Ω–æ": 0.75, "üåßÔ∏è –î–æ–∂–¥—å": 0.75}}, "https://i.ibb.co/XxHhbvy/image.png", 1001),
    1002: fish_rod("–ö–æ—Ä–≤–∏–Ω–∞", [(components['5'], 1000), (components['3'], 400), (components['6'], 800), (components['4'], 80), (components['8'], 250)], "–í—ã–∫–æ–≤–∞–Ω–∞ –≤ –∫—É–∑–Ω–µ –±–æ–≥–æ–≤", {'x': 4, 'aim': 3}, "https://i.ibb.co/4Pt9LNF/image.png", 1002),
}

all_rods = {**rods, **custom_rods}

ponds: Dict[int, pond] = {
    1: pond("–ü—Ä–µ—Å–Ω—ã–π –≤–æ–¥–æ—ë–º", 1000, "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–Ω—ã–π –≤–æ–¥–æ—ë–º –≤ –æ–∫—Ä—É–≥–µ", {'x': 1.0, "chances": [fish_chance(2, 0.5), fish_chance(8, 0.3), fish_chance(7, 0.1), fish_chance(5, 0.08), fish_chance(1, 0.02)]}, "https://i.ibb.co/KNky44x/image.png", 1),
    2: pond("–ú–æ—Ä–µ", 30000, "–ª–∏–±–æ –ø–æ–π–º–∞–µ—à—å —Ç—ã, –ª–∏–±–æ –ø–æ–π–º–∞—é—Ç —Ç–µ–±—è", {'x': 1.0, "chances": [fish_chance(3, 0.4), fish_chance(9, 0.36), fish_chance(10, 0.2), fish_chance(6, 0.03), fish_chance(4, 0.01)]}, "https://i.ibb.co/njdKhpf/image.png", 2)
}

fishs: Dict[int, fish] = {
    1: fish("–õ–æ—Å–æ—Å—å", 800, "–ö–∞–∂–¥—ã–π —Ä—ã–±–∞–∫ –º–µ—á—Ç–∞–µ—Ç –ø–æ–π–º–∞—Ç—å —ç—Ç—É —Ä—ã–±—É: –µ—ë —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å 11 –∫–∏–ª–æ–≥—Ä–∞–º–º!", "https://i.ibb.co/71sSjPT/image.png", (1.1, 21.1, 11.1), (components["3"], )), #weight: (min, max, avg)
    2: fish("–°—Ç–∞–≤—Ä–∏–¥–∞", 100, "–ò–º–µ–µ—Ç –≤–µ—Ä–µ—Ç–µ–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —É–¥–ª–∏–Ω—ë–Ω–Ω–æ–µ —Ç–µ–ª–æ, –ø–æ–∫—Ä—ã—Ç–æ–µ –º–µ–ª–∫–æ–π —á–µ—à—É—ë–π, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–µ–µ—Å—è —Ç–æ–Ω–∫–∏–º —Ö–≤–æ—Å—Ç–æ–≤—ã–º —Å—Ç–µ–±–ª–µ–º.", "https://i.ibb.co/bdZNF0t/image.png", (1, 2, 1.5), (components["1"], )),
    3: fish("–†—ã–±–∞-—Å–∞–º–æ–ª—ë—Ç", 150, "–≠—Ç–æ –ø—Ç–∏—Ü–∞? —ç—Ç–æ —Å–∞–º–æ–ª—ë—Ç? –Ω–µ—Ç! —ç—Ç–æ —Ä—ã–±–∞-—Å–∞–º–æ–ª—ë—Ç", "https://i.ibb.co/wSkRhbV/image.png", (1, 3, 2), (components["5"], )),
    4: fish("–ó–æ–ª–æ—Ç–∞—è", 2000, "–í –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ —Å–ª–æ–≤–∞ '–æ—Ç–ø—É—Å—Ç–∏ –º–µ–Ω—è, —Å—Ç–∞—Ä—á–µ' –∏–º–µ–ª–∏ –±—ã —Å–º—ã—Å–ª'", "https://i.ibb.co/Tbm84zD/image.png", (1, 1.5, 1.25), (components["7"], components["4"], )),
    5: fish("–°–æ–º", 300, "–û–¥–∏–Ω –∏–∑ —Ü–µ–Ω–Ω–µ–π—à–∏—Ö —Ç—Ä–æ—Ñ–µ–µ–≤ —Ä—ã–±–∞–∫–∞", "https://i.ibb.co/7gDdtpC/image.png", (0.1, 20, 10.05), (components["6"], )),
    6: fish("–ê–∫—É–ª–∞", 1250, "–ö–∞–∫ –æ–Ω–∞ –≤–æ–æ–±—â–µ –∫–ª—é–Ω—É–ª–∞?!", "https://i.ibb.co/vPwRhWf/image.png", (0.2, 20000, 10000.1), (components["8"], components["3"], components["6"])),
    7: fish("–©—É–∫–∞", 200, "–ù–µ –≥–æ–≤–æ—Ä—è—â–∞—è, –Ω–æ –∏ –º—ã –Ω–µ –≤ —Å–∫–∞–∑–∫–µ", "https://i.ibb.co/kGRKPg4/image.png", (0.1, 8, 4.05), (components["2"], )),
    8: fish("–õ–∏–Ω—å", 60, "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–¥, –æ—Ç–ª–∏—á–Ω—ã–π –≤–∫—É—Å –∏ —Å—Ç–æ–∏—Ç –¥—ë—à–µ–≤–æ!", "https://i.ibb.co/bKkYvDX/image.png", (0.1, 4, 2.05), (components["7"], )),
    9: fish("–¢—Ä–µ—Å–∫–∞", 200, "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç—Ä–æ—Ñ–µ–π —Å–µ–≤–µ—Ä–Ω—ã—Ö –º–æ—Ä–µ–π", "https://i.ibb.co/gSQvXgk/image.png", (0.1, 10, 5.05), (components["6"], )),
    10: fish("–ü–∞–ª—Ç—É—Å", 100, "–í —ç—Ç–æ–º –º–æ—Ä–µ –æ–Ω–∏ –¥–æ–ª–≥–æ –Ω–µ –∂–∏–≤—É—Ç", "https://i.ibb.co/k6yh87t/image.png", (7, 100, 53.5), (components["1"], )),
}

fishing_shop = {
    'rods': list(rods.keys()), #id fish_rod,
    'ponds': list(ponds.keys()) #id pond
}

modifiers = {
    "üåßÔ∏è –î–æ–∂–¥—å": 1,
    "üå´Ô∏è –¢—É–º–∞–Ω": 0.75,
    "üåû –Ø—Å–Ω–æ": 0.85
}

temp_modifiers = {
    i: 1 if i in range(15, 21) else 0.9 if (i in range(8, 15) or i in range(21, 26)) else 0.8 for i in range(31)
}

async def get_fish(index, modifier, temp, weather, time=None, t=None, w=None):
    f = fishs[index]
    if w:
        modifier *= w[weather]
    if t:
        if time in range(21, 6):
            modifier *= t[0]
        else:
            modifier *= t[1]
    avg = f.weight[2]
    weight = round(uniform(f.weight[0], f.weight[1]), 2)
    cost = round(f.cost * weight / avg * modifier * modifiers[weather] * temp_modifiers[temp])
    comps = {
        i.id: max(1, round(weight * 2 / avg * modifier * modifiers[weather] * temp_modifiers[temp])) for i in f.components
    }
    return fish(f.name, cost, f.description, f.url, weight, comps)

async def json_fish(fish: fish):
    return {
        'name': fish.name,
        'cost': fish.cost,
        'description': fish.description,
        'url': fish.url,
        'weight': fish.weight,
        'components': fish.components
    }